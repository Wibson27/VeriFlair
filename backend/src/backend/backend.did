type BadgeRarity = variant {
  Common;
  Uncommon;
  Rare;
  Epic;
  Legendary;
};

type Badge = record {
  id : text;
  name : text;
  description : text;
  earned_at : nat64;
  rarity : BadgeRarity;
  criteria : text;
};

type GitHubData = record {
  repos : nat32;
  commits : nat32;
  stars : nat32;
  followers : nat32;
  languages : vec text;
};

type UserProfile = record {
  user_principal : principal;
  github_username : text;
  created_at : nat64;
  reputation_score : nat64;
  badges : vec Badge;
  github_data : opt GitHubData;
};

type GitHubAnalysis = record {
  username : text;
  total_repos : nat32;
  total_commits : nat32;
  languages : vec text;
  contributions_this_year : nat32;
  account_age_days : nat32;
  followers : nat32;
  following : nat32;
  analyzed_at : nat64;
};

type ProfileStats = record {
  total_users : nat64;
  total_badges_earned : nat64;
  total_repositories_analyzed : nat64;
  average_reputation : float64;
};

service : {
  create_profile : (text) -> (variant { Ok : UserProfile; Err : text });
  get_profile : (opt principal) -> (opt UserProfile) query;
  get_badges : (opt principal) -> (vec Badge) query;
  get_leaderboard : (opt nat32) -> (vec UserProfile) query;
  refresh_github_data : (text) -> (variant { Ok : UserProfile; Err : text });
  perform_github_analysis : (text) -> (variant { Ok : GitHubAnalysis; Err : text });
  get_llm_analysis : (text) -> (variant { Ok : text; Err : text });
  greet : (text) -> (text) query;
  health_check : () -> (text) query;
  get_stats : () -> (ProfileStats) query;
  get_api_info : () -> (text) query;
}